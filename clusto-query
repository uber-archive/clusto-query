#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from __future__ import absolute_import

import collections
import itertools
import logging
import optparse
import re
import sys
import socket
import struct
import string
import time

import clusto
import clusto.script_helper


__author__ = "James Brown <jbrown@uber.com>"
version_info = (0, 3, 3)
__version__ = ".".join(map(str, version_info))


long_help = """
clusto-query version %(version)s by %(author)s

Perform arbitrary boolean queries against clusto

Infix expression operators are the following:
    =   equality
    !=  inequality
    <=  le
    <   lt
    >   gt
    >=  ge
    ^   startswith
    ,   endswith
    contains  substring
    in_cidr ipv4 cidr comparisons

Additionally, there are boolean operators and, or, and - (set subtraction)

some keywords (pool, datacenter, clusto_type, and name) can be directly queried
anything that's an "Attribute" must be prefixed with attr

Here's an example query:

    clusto_type = server and
    (attr system.cpucount >= 15 or system.memory >= 32760)
    and datacenter = peak-mpl1'

This query fetches all servers with more than 16 cores or 32768 MB of RAM
located in the "peak-mlp1" datacenter. Neato!

Note that I put in "15" instead of "16" intentionally; clusto's cpu counting
is off-by-one. That was fun. Let's go again:

    clusto_type contains "server" and
    (attr nagios.disabled = 1 - hostname endswith peak2)

This one finds all servers that are disabled in nagios and do not have a
hostname that ends in peak2.

Quoting and parens work the way you expect them to.
""" % {'version': __version__, 'author': __author__}


log = None

### BOOKKEEPING STUFF


class ExpectedTokenError(StandardError):
    def __init__(self, expected, got):
        self.expected = expected
        self.got = got

    def __str__(self):
        return "Missing expected token (expected '%s', got '%s')" % (self.expected, self.got)


class UnexpectedTokenError(StandardError):
    pass


class StringParseError(StandardError):
    pass


def _expect(token, q):
    if not q or q[0] != token:
        raise ExpectedTokenError(token, q[0])
    else:
        return q[1:]


def _consume(token, string):
    return string[len(token):]


ContextKey = collections.namedtuple('ContextKey', ['item_type', 'name'])


def _generate_key(clusto_item):
    return ContextKey(clusto_item._clusto_type, clusto_item.name)


def _extract_name_from_key(key):
    return key[1]


def flatten(list_of_lists):
    res = []
    for item in list_of_lists:
        if isinstance(item, (list, tuple)):
            res.extend(flatten(item))
        else:
            res.append(item)
    return res


class SimpleCidrSet(object):
    def __init__(self):
        self.ranges = []

    def add_cidr(self, base, mask):
        """
        base: dotted-notation version of the base
        mask: integer for the netmask
        """
        mask = int(mask)
        base = struct.unpack('!L', socket.inet_aton(base))[0]
        maxsz = (01 << 32) - 1
        mask = 32 - mask
        mask = ((01 << mask) - 1) & maxsz
        min_addr = base & ~mask
        max_addr = base | mask
        self.ranges.append((min_addr, max_addr))

    def __contains__(self, address):
        """address should be dotted notation"""
        addr = struct.unpack('!L', socket.inet_aton(address))[0]
        for mina, maxa in self.ranges:
            if addr > mina and addr < maxa:
                return True
        return False

RFC1918 = SimpleCidrSet()
RFC1918.add_cidr('10.0.0.0', 8)
RFC1918.add_cidr('172.16.0.0', 12)
RFC1918.add_cidr('192.168.0.0', 16)

### DEFINITIONS

SEARCH_KEYWORDS = ["pool", "name", "clusto_type", "datacenter", "hostname", "role"]
BOOLEAN_OPERATORS = {}
UNARY_BOOLEAN_OPERATORS = {}
INFIX_OPERATORS = {}
SUFFIX_OPERATORS = {}


class QueryType(type):
    pass


class OperatorType(QueryType):
    def __new__(mcs, cls, *args, **kwargs):
        constructed_class = super(OperatorType, mcs).__new__(mcs, cls, *args, **kwargs)
        if getattr(constructed_class, "operator_map", None) is not None and getattr(constructed_class, "operator", None) is not None:
            if isinstance(constructed_class.operator, basestring):
                constructed_class.operator_map[constructed_class.operator] = constructed_class
            else:
                for operator in constructed_class.operator:
                    constructed_class.operator_map[operator] = constructed_class
        return constructed_class


class QueryObject(object):
    __metaclass__ = QueryType

    def run(self, candidate_hosts, context):
        return candidate_hosts


class Operator(QueryObject):
    __metaclass__ = OperatorType

    def __init__(self, *parameters):
        self.parameters = parameters

    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, ", ".join(map(repr, self.parameters)))


class BooleanOperator(Operator):
    operator_map = BOOLEAN_OPERATORS


class UnaryBooleanOperator(Operator):
    operator_map = UNARY_BOOLEAN_OPERATORS


class Intersection(BooleanOperator):
    operator = ("&", "and")

    def run(self, candidate_hosts, context):
        results = set(candidate_hosts)
        for p in self.parameters:
            results &= p.run(results, context)
        return results


class Union(BooleanOperator):
    operator = ("|", "or")

    def run(self, candidate_hosts, context):
        results = set()
        for p in self.parameters:
            results |= p.run(candidate_hosts, context)
        return results


class Subtraction(BooleanOperator):
    operator = "-"

    def run(self, candidate_hosts, context):
        results = self.parameters[0].run(candidate_hosts, context)
        for p in self.parameters[1:]:
            results -= p.run(candidate_hosts, context)
        return results


class Not(UnaryBooleanOperator):
    operator = ("not", "~")

    def run(self, candidate_hosts, context):
        return set(candidate_hosts) - self.parameters[0].run(candidate_hosts, context)


class Context(object):
    CONTEXT_TYPES = ("pool", "datacenter")

    def __init__(self, clusto, pools=(), datacenters=()):
        # TODO: we can apply filtering here
        self.clusto = clusto
        self.entity_map = dict((_generate_key(e), e) for e in clusto.get_entities())
        self.d = None
        self.pools = pools
        self.datacenters = datacenters

    @staticmethod
    def _populate_through_children(root, ctx):
        work_queue = [root]
        while work_queue:
            parent = work_queue.pop()
            for child in parent.contents():
                yield _generate_key(child), ctx
                work_queue.append(child)

    def populate_pools_and_datacenters(self):
        # if there are datacenters and pools in 'and' in queries, limit the root.
        names = set(self.pools) | set(self.datacenters)
        types = set()
        if self.pools:
            types.add('pool')
        if self.datacenters:
            types.add('datacenter')

        if names:
            roots = clusto.get_entities(names=names, clusto_types=types)
        else:
            roots = self.clusto.get_entities(clusto_types=self.CONTEXT_TYPES)
        results = dict((ty, {}) for ty in self.CONTEXT_TYPES)
        for root in roots:
            if isinstance(root, clusto.drivers.Pool):
                ty = 'pool'
            elif isinstance(root, clusto.drivers.datacenters.basicdatacenter.BasicDatacenter):
                ty = 'datacenter'
            for child, root in self._populate_through_children(root, _generate_key(root)):
                results[ty].setdefault(child, set([]))
                results[ty][child].add(root)
        self.d = results

    def context(self, ty, host):
        if self.d is None:
            self.populate_pools_and_datacenters()
        if ty in self.CONTEXT_TYPES:
            return self.d[ty].get(host, set([]))
        else:
            raise AttributeError()

    def role_for_host(self, host):
        if not isinstance(host, ContextKey):
            host = _generate_key(host)
        for pool_key in self.context('pool', host):
            pool = self.entity_map[pool_key]
            maybe_attrs = pool.attrs(key='pooltype')
            if maybe_attrs and maybe_attrs[0].value == 'role':
                return pool.name
        return None


class SuffixOperator(Operator):
    operator_map = SUFFIX_OPERATORS

    def __init__(self, lhs):
        self.lhs = lhs
        super(SuffixOperator, self).__init__(lhs)


def _extract_property(host, attribute, context):
    if isinstance(attribute, Attribute):
        return flatten(attribute.get(host, context).values())
    if attribute == "clusto_type":
        return context.entity_map[host]._clusto_type
    elif attribute == "role":
        return context.role_for_host(host)
    elif attribute in context.CONTEXT_TYPES:
        return map(_extract_name_from_key, context.context(attribute, host))
    else:
        return getattr(context.entity_map[host], attribute)


class ExistsOperator(SuffixOperator):
    operator = ('exists',)

    def _exists(self, host, context):
        prop = _extract_property(host, self.lhs, context)
        return bool(prop)

    def run(self, candidate_hosts, context):
        hosts = set()
        for host in candidate_hosts:
            if self._exists(host, context):
                hosts.add(host)
        return hosts


class InfixOperator(Operator):
    operator_map = INFIX_OPERATORS
    satisfy_any_with_pool = True

    def __init__(self, lhs, rhs):
        self.lhs = lhs
        self.rhs = rhs
        super(InfixOperator, self).__init__(lhs, rhs)

    def get_host_attribute(self, host, attribute, context):
        return _extract_property(host, attribute, context)

    def run(self, candidate_hosts, context):
        results = set()
        for host in candidate_hosts:
            log.debug("Checking %s for %s key %s and %s", self.__class__.__name__, host, self.lhs, self.rhs)
            try:
                lhses = self.get_host_attribute(host, self.lhs, context)
            except AttributeError:
                continue
            if not isinstance(lhses, (list, set, tuple)):
                lhses = [lhses]
            if (self.lhs == 'pool' or isinstance(self.lhs, Attribute)) and not self.satisfy_any_with_pool:
                log.debug('satisfying all')
                match = all(self.comparator(lhs, self.rhs) for lhs in lhses)
            else:
                match = any(self.comparator(lhs, self.rhs) for lhs in lhses)
            if match:
                log.debug("Check passed")
                results.add(host)
        return results

    @staticmethod
    def comparator(lhs, rhs):
        raise NotImplementedError()


class Equality(InfixOperator):
    operator = ("=", "is", "==")

    @staticmethod
    def comparator(lhs, rhs):
        if isinstance(lhs, Attribute):
            return lhs == rhs
        else:
            return str(lhs) == str(rhs)


class Inequality(InfixOperator):
    operator = ("!=", "isnt", "<>")
    # for inequalities, if we say (pool!=api), we want things that are not
    # in the API pool, not things that have a pool that is not API
    satisfy_any_with_pool = False

    @staticmethod
    def comparator(lhs, rhs):
        return lhs != rhs


class GT(InfixOperator):
    operator = ">"

    @staticmethod
    def comparator(lhs, rhs):
        return lhs > rhs


class GE(InfixOperator):
    operator = ">="

    @staticmethod
    def comparator(lhs, rhs):
        return lhs >= rhs


class LE(InfixOperator):
    operator = "<="

    @staticmethod
    def comparator(lhs, rhs):
        return lhs <= rhs


class StartsWith(InfixOperator):
    operator = ("^", "startswith")

    @staticmethod
    def comparator(lhs, rhs):
        return lhs.startswith(rhs)


class EndsWith(InfixOperator):
    operator = (",", "endswith")

    @staticmethod
    def comparator(lhs, rhs):
        return lhs.endswith(rhs)


class SubString(InfixOperator):
    operator = "contains"

    @staticmethod
    def comparator(lhs, rhs):
        return rhs in lhs


class InCidr(InfixOperator):
    operator = "in_cidr"

    def __init__(self, lhs, rhs):
        super(InCidr, self).__init__(lhs, rhs)
        try:
            base, mask = rhs.split("/")
            base = socket.inet_ntoa(socket.inet_aton(base))  # check parse
            mask = int(mask)
            assert mask >= 0 and mask < 32
        except:
            raise ValueError("RHS must be a Cidr (base/mask)")

    @staticmethod
    def comparator(lhs, rhs):
        # TODO(jbrown): Support IPv6
        query = socket.inet_ntoa(socket.inet_aton(lhs))  # check parse
        cidr_set = SimpleCidrSet()
        base, mask = rhs.split("/")
        cidr_set.add_cidr(base, mask)
        return query in cidr_set


class Attribute(QueryObject):
    def __init__(self, key, subkey, number):
        self.key = key
        self.subkey = subkey
        self.number = int(number) if number is not None else None

    def __repr__(self):
        description = self.key
        if self.subkey:
            description += ".%s" % self.subkey
        if self.number:
            description += ":%d" % self.number
        return "Attribute(%s)" % description

    def get(self, host, context):
        kwargs = {'key': self.key, 'merge_container_attrs': True}
        if self.subkey:
            kwargs['subkey'] = self.subkey
        if self.number:
            kwargs['number'] = self.number
        resv = {}
        gotten = context.entity_map[host].attrs(**kwargs)
        for v in gotten:
            key = (v.key, v.subkey, v.number)
            if key in resv:
                resv[key].append(self._check(v.value))
            else:
                resv[key] = [self._check(v.value)]
        return resv

    @staticmethod
    def _check(value):
        # XXX: clusto.drivers.Pool inherits from basestring. why?
        if isinstance(value, clusto.drivers.base.driver.Driver):
            return value.name
        elif not isinstance(value, basestring):
            return value
        elif all(c.isdigit() for c in value):
            return int(value)
        elif all(c.isdigit() or c == "." for c in value):
            try:
                return float(value)
            except Exception:
                return value
        else:
            return value


### SIMPLE RECURSIVE-DESCENT PARSER
_attribute_re = re.compile(r'([\w-]+)(\.([\w-]+))?(\:([0-9]+))?')


def parse_attribute(q):
    smd = _attribute_re.match(q[0])
    if not smd:
        raise StringParseError
    return Attribute(smd.group(1), smd.group(3), smd.group(5)), q[1:]


def parse_expression(q):
    if q[0] == "(":
        lhs, q = parse_boolean(q[1:])
        q = _expect(")", q)
        return lhs, q
    elif q[0] == "attr":
        lhs, q = parse_attribute(_expect("attr", q))
    elif "." in q[0]:
        raise StringParseError("Found a . in %s; missing attr?" % q[0])
    else:
        for op, kls in sorted(UNARY_BOOLEAN_OPERATORS.iteritems(), key=len, reverse=True):
            if op == q[0]:
                exp, rest = parse_expression(_expect(op, q))
                return kls(exp), rest
        else:
            lhs = q[0]
            q = q[1:]
    for op, kls in sorted(SUFFIX_OPERATORS.iteritems(), key=len, reverse=True):
        if q[0] == op:
            return kls(lhs), q[1:]
    for op, kls in sorted(INFIX_OPERATORS.iteritems(), key=len, reverse=True):
        if q[0] == op:
            return kls(lhs, q[1]), q[2:]
    else:
        raise UnexpectedTokenError(q)


def parse_boolean(q):
    lhs, rest = parse_expression(q)
    if rest:
        for op, kls in sorted(BOOLEAN_OPERATORS.iteritems(), key=len, reverse=True):
            if rest[0] == op:
                rhs, rest = parse_boolean(rest[1:])
                lhs = kls(lhs, rhs)
                break
        else:
            if rest[0] == ")":
                return lhs, rest
            else:
                raise UnexpectedTokenError(rest)
    return lhs, rest


def parse_query(q):
    return parse_boolean(q)


### LEXER
_single_quoted_string_re = re.compile(r"'((\\')|[^']*)'")
_double_quoted_string_re = re.compile(r'"((\\")|[^"]*)"')
_unquoted_string_re = re.compile(r'([\w./:-]+)')


def lex_string_inner(string):
    for char, regex in (("'", _single_quoted_string_re), ('"', _double_quoted_string_re)):
        if string.startswith(char):
            smd = regex.match(string)
            if not smd:
                raise StringParseError(string)
            return smd.group(1), False, _consume(smd.group(0), string)
    smd = _unquoted_string_re.match(string)
    if not smd:
        raise StringParseError(string)
    return smd.group(1), True, _consume(smd.group(0), string)


SIZE_MAP = {
    'K': 1024,
    'M': 1024 * 1024,
    'G': 1024 * 1024 * 1024,
    'T': 1024 * 1024 * 1024 * 1024,
}


def convert_size(string):
    base = string[:-1]
    multiplier = SIZE_MAP[string[-1]]
    if all(c.isdigit() for c in base):
        base = int(base)
    else:
        base = float(base)
    return base * multiplier


def lex_string(string):
    parsed, maybe_is_number, rest = lex_string_inner(string)
    if maybe_is_number:
        if all(c.isdigit() or c == "." for c in parsed[:-1]) and parsed[-1] in SIZE_MAP:
            try:
                return convert_size(parsed), rest
            except Exception:
                return parsed, rest
        elif all(c.isdigit() for c in parsed):
            return int(parsed), rest
        elif all(c.isdigit() or c == "." for c in parsed):
            try:
                return float(parsed), rest
            except ValueError:
                return parsed, rest
    return parsed, rest


def lex(q):
    keywords = ["attr"]
    keywords.extend(SEARCH_KEYWORDS)
    keywords.extend(BOOLEAN_OPERATORS.keys())
    keywords.extend(UNARY_BOOLEAN_OPERATORS.keys())
    keywords.extend(INFIX_OPERATORS.keys())
    keywords.extend(("(", ")"))
    keywords.sort(key=len, reverse=True)
    results = []
    while q:
        q = q.lstrip()
        for keyword in keywords:
            if q.startswith(keyword):
                results.append(keyword)
                q = _consume(keyword, q)
                break
        else:
            result, q = lex_string(q)
            results.append(result)
    return results


class HostFormatter(object):
    option = None
    default = False

    def __init__(self, host, context):
        self.host = host
        self.context = context

    def name(self):
        return self.host.name

    def hostname(self):
        return self.host.hostname

    def role(self):
        return self.context.role_for_host(self.host)

    def internal_ips(self):
        return ",".join(ip for ip in self.host.get_ips() if ip in RFC1918)

    def public_ips(self):
        return ",".join(ip for ip in self.host.get_ips() if ip not in RFC1918)

    def __getitem__(self, item):
        if "." in item:
            key, subkey = item.split(".")
            return ",".join(map(str, (k.value for k in self.host.attrs(key=key, subkey=subkey))))
        return getattr(self, item)()


class EasierTemplate(string.Template):
    # $ is challenging in shell scripts
    delimiter = "%"
    idpattern = r'[a-z_][a-zA-Z0-9_.-]*'


def main():
    global log
    parser = optparse.OptionParser(usage="%prog [options] clusto_query_string", version=__version__)
    parser.add_option('-v', '--verbose', action='count', default=0)
    parser.add_option('-f', '--formatter', default=r"%name", help='Formatter to use for printing, default "%default"')
    parser.add_option('--list-attributes', default=False, action='store_true', help='Print all the queryable attributes')
    parser.add_option('--clusto-config', default='/etc/clusto/clusto.conf', help='Path to clusto config file (default %default)')
    parser.add_option('--man', action="store_true", help="Show more detailed help")
    parser.add_option('--new_query', action='store_true', help="Use new query")
    opts, args = parser.parse_args()

    level = logging.WARNING
    if opts.verbose == 1:
        level = logging.INFO
    elif opts.verbose > 1:
        level = logging.DEBUG

    if opts.man:
        print long_help
        return 0

    conf = clusto.script_helper.load_config(opts.clusto_config)
    clusto.connect(conf)

    formatter = logging.Formatter("%(asctime)s %(levelname)s: %(message)s")

    # clusto.connect screws up logging for all of its consumers, so we need
    # to init logging *after* calling clusto.connect
    log = logging.getLogger("clusto-query-logger")
    log.propagate = 0
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    handler.setLevel(level)
    log.addHandler(handler)
    log.setLevel(level)

    try:
        fh = logging.handlers.RotatingFileHandler('/var/log/clusto-query/clusto-query.log',
                                                  maxBytes=50000000)  # 50 megabytes
        fh.setFormatter(formatter)
        fh.setLevel(logging.INFO)
        log.addHandler(fh)
    except:
        # don't care if we can't write to file
        pass

    if opts.list_attributes:
        all_attrs = [it.attrs() for it in clusto.get_entities()]
        print "\n".join(sorted(set([".".join(map(str, (at.key, at.subkey))) for at in itertools.chain.from_iterable(all_attrs)])))
        return 0

    if not args:
        parser.error("No query provided")
    raw_query = " ".join(args)
    start_time = time.time()
    log.info("Going to parse %r", raw_query)
    lexed_query = lex(raw_query)
    log.info("Lexed into %r", lexed_query)
    parsed_query, unparsed = parse_query(lexed_query)
    log.info("Parsed into %r", parsed_query)
    if unparsed:
        log.warning("Unparsed content: %r", unparsed)
        return 1

    # fetch all the hosts
    format_template = EasierTemplate(opts.formatter)

    if opts.new_query:
        query_params = parse_equality(parsed_query)
    else:
        query_params = {}

    context = Context(clusto, **query_params)

    keys = context.entity_map.keys()

    res = sorted(parsed_query.run(keys, context))

    for result_key in res:
        host = context.entity_map[result_key]
        print format_template.substitute(HostFormatter(host, context))
    log.info("Total time spent: %f" % (time.time() - start_time))
    return 0


def parse_equality(formula):
    """
    Parse parsed_query, and trying the best to limit the root scope in
    populate_pools_and_datacenters. Basically searching everywhere pool and datacenter
    exists and add to param

    out of them

    :param formula:
    :return:
    """
    if isinstance(formula, Equality):
        if formula.lhs == 'pool':
            return {'pools': set([formula.rhs])}
        elif formula.lhs == 'datacenter':
            return {'datacenters': set([formula.rhs])}
    elif isinstance(formula, Intersection):
        query_params = {}
        to_process = [p for p in formula.parameters]
        while to_process:
            elem = to_process.pop(0)
            if isinstance(elem, (BooleanOperator, UnaryBooleanOperator, SuffixOperator)):
                to_process += [p for p in elem.parameters]
            elif isinstance(elem, InfixOperator):
                if elem.lhs == 'pool':
                    query_params.setdefault('pools', set()).add(elem.rhs)
                elif elem.lhs == 'datacenter':
                    query_params.setdefault('datacenters', set()).add(elem.rhs)

        return query_params


if __name__ == '__main__':
    sys.exit(main())
