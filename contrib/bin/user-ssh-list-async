#!/usr/bin/env python

import argparse
import sys
import subprocess
import os
import signal


def run_command_on(host, command, username):
    try:
        subprocess.check_call(
            ['ping', '-w1', '-c1', '-q', host],
            shell=False,
            stdout=open(os.devnull),
            stderr=open(os.devnull),
        )
    except Exception:
        print >>sys.stderr, 'Could not ping %s, moving on' % host
        return
    cmd = [
        '/usr/bin/ssh', '-o', 'ConnectTimeout=3', '-o',
        'StrictHostKeyChecking=no', '-l', username, host,
    ] + command

    p = subprocess.Popen(
        cmd,
        shell=False,
        stderr=subprocess.STDOUT,
        stdout=subprocess.PIPE,
        # in case the child cares, which most don't
        preexec_fn=lambda: signal.signal(signal.SIGPIPE, signal.SIG_DFL),
    )
    for line in p.stdout:
        if os.environ.get('SSH_LIST_NO_PREFIX', 'n')[0].lower() == 'y':
            prefix = ''
        else:
            prefix = '%s | ' % host
        if not line.endswith('\n'):
            line += '\n'
        sys.stdout.write('%s%s' % (prefix, line))
        # flush once per line to ensure that we don't have to wait for a while
        # process invocation to get our flush
        sys.stdout.flush()
    p.wait()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('username')
    parser.add_argument('clusto_query'),
    parser.add_argument('command', nargs='+')
    args = parser.parse_args()

    if args.clusto_query == "all":
        clusto_query = "(clusto_type = server)"
    else:
        clusto_query = args.clusto_query

    os.environ['CLUSTO_TYPE_FILTER'] = 'server'

    servers = subprocess.check_output(
        ["clusto-query", clusto_query], shell=False
    ).split('\n')
    servers = [s.strip() for s in servers if s.strip()]

    max_processes = int(os.environ.get('SSH_LIST_POOL_SIZE', 48))

    children = []

    for server in servers:
        if len(children) < max_processes:
            pid = os.fork()
            if pid:
                children.append(pid)
            else:
                try:
                    status = 1
                    run_command_on(server, args.command, args.username)
                    status = 0
                finally:
                    # normally done at process exit, but we have to use os._exit when forking
                    # so we gotta do our cleanup ourselves
                    sys.stdout.flush()
                    sys.stderr.flush()
                    os._exit(status)
        else:
            try:
                dead_child, status = os.wait()
            except KeyboardInterrupt:
                sys.stderr.write("Exception while waiting on %s@%s %s"
                                % (args.username, server, args.command))
                raise
            children.remove(dead_child)

    while children:
        dead_child, status = os.wait()
        children.remove(dead_child)

main()
